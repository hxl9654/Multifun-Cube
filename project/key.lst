C51 COMPILER V9.02   KEY                                                                   03/28/2015 01:35:11 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN ..\output\key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\key.c BROWSE DEBUG OBJECTEXTEND PRINT(.\key.lst) OBJECT(..\output
                    -\key.obj)

line level    source

   1          /*//////////////////////////GPL¿ªÔ´Ðí¿ÉÖ¤////////////////////////////////////////////////
   2              Copyright (C) <2014>  <Xianglong He>
   3              This program is free software: you can redistribute it and/or modify
   4              it under the terms of the GNU General Public License as published by
   5              the Free Software Foundation, either version 3 of the License, or
   6              (at your option) any later version.
   7          
   8              This program is distributed in the hope that it will be useful,
   9              but WITHOUT ANY WARRANTY; without even the implied warranty of
  10              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11              GNU General Public License for more details.
  12          
  13              You should have received a copy of the GNU General Public License
  14              along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15          
  16                  °æÈ¨ËùÓÐ£¨C£© <2014>   <ºÎÏàÁú>
  17                  ÕâÒ»³ÌÐòÊÇ×ÔÓÉÈí¼þ£¬Äã¿ÉÒÔ×ñÕÕ×ÔÓÉÈí¼þ»ù½ð»á³ö°æµÄGNUÍ¨ÓÃ¹«¹²Ðí¿ÉÖ¤
  18                  Ìõ¿îÀ´ÐÞ¸ÄºÍÖØÐÂ·¢²¼ÕâÒ»³ÌÐò¡£Äã¿ÉÒÔÊ¹ÓÃÐí¿ÉÖ¤µÄµÚÈý°æ£¬»òÕß£¨¸ù¾ÝÄã
  19                  µÄÑ¡Ôñ£©ÓÃÈÎºÎ¸üÐÂµÄ°æ±¾¡£
  20          
  21                  ·¢²¼ÕâÒ»³ÌÐòµÄÄ¿µÄÊÇÏ£ÍûËüÓÐÓÃ£¬µ«Ã»ÓÐÈÎºÎµ£±£¡£ÉõÖÁÃ»ÓÐÊÊºÏÌØ¶¨Ä¿µÄ
  22                  µÄÒþº¬µÄµ£±£¡£¸üÏêÏ¸µÄÇé¿öÇë²ÎÔÄGNUÍ¨ÓÃ¹«¹²Ðí¿ÉÖ¤¡£
  23          
  24                  ÄãÓ¦¸ÃÒÑ¾­ºÍ³ÌÐòÒ»ÆðÊÕµ½Ò»·ÝGNUÍ¨ÓÃ¹«¹²Ðí¿ÉÖ¤µÄ¸±±¾¡£Èç¹û»¹Ã»ÓÐ£¬Çë·Ã
  25                  ÎÊ<http://www.gnu.org/licenses/>¡£
  26                  ×÷Õß£ººÎÏàÁú
  27                  ÓÊÏä£ºqwgg9654@gmail.com
  28                            568629794@qq.com
  29                  2014Äê12ÔÂ9ÈÕ
  30                  ¹¦ÄÜÃèÊö£º°´¼üµÄÉ¨ÃèºÍ´¥·¢
  31          *////////////////////////////////////////////////////////////////////////////////////////
  32          /*//////////////////Íâ²¿ÉùÃ÷//////////////////////////////////
  33          extern void KeyScan(uint8 ms);  //ÔÚ¶¨Ê±Æ÷ÖÐ¶ÏÖÐµ÷ÓÃ£¬¶ÁÈ¡°´¼üÐÅÏ¢£¨ms£º¶¨Ê±Æ÷¶¨Ê±Ê±¼ä¼ä¸ô£©
  34          extern void KeyDriver();        //ÔÚÖ÷Ñ­»·ÖÐµ÷ÓÃ£¬´¥·¢°´¼ü²Ù×÷
  35          ////////////////////////////////////////////////////////////*/
  36          
  37          #include<reg51.h>
  38          #define KEYTIMELIMIT 1000       //°´ÏÂ°´¼ü³¬¹ý´ËÊ±¼ä½«»á´¥·¢³¤°´Ä£Ê½£¬ÖÃ0±íÊ¾¹Ø±Õ£¬µ¥Î»£ºms
  39          #define KEYTIMEINC 200          //³¤°´Ä£Ê½ÖÐ£¬Ã¿´ËÊ±¼ä´¥·¢Ò»´Î°´¼üÏàÓ¦£¬µ¥Î»£ºms
  40          
  41          typedef unsigned char uint8;
  42          typedef unsigned int uint16;
  43          
  44          extern void KeyAction(uint8 keyc,uint8 statu);  //´Ëº¯ÊýÐèÒªÔÚÍâ²¿¶¨Òå£¬µ±°´¼ü±»´¥·¢£¬×Ô¶¯µ÷ÓÃ£¨keyc£º°´¼üÂ
             -ë£¬statu£º°´¼ü×´Ì¬£¬0-°´¼ü°´ÏÂ£¬1-°´¼üµ¯Æð£¬2-°´¼ü³¤°´£©
  45          
  46          sbit KEYOUT1=P2^3; //¸ù¾ÝÊµ¼ÊÇé¿ö¸ü¸Ä
  47          sbit KEYOUT2=P2^2;
  48          sbit KEYOUT3=P2^1;
  49          sbit KEYOUT4=P2^0;
  50          sbit KEYIN1=P2^4;
  51          sbit KEYIN2=P2^5;
  52          sbit KEYIN3=P2^6;
  53          sbit KEYIN4=P2^7;
C51 COMPILER V9.02   KEY                                                                   03/28/2015 01:35:11 PAGE 2   

  54          
  55          uint16 xdata keylimit[4][4]={
  56                  {KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT},
  57                  {KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT},
  58                  {KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT},
  59                  {KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT,KEYTIMELIMIT}
  60                  };
  61          uint16 xdata keytime[4][4]={
  62                  {0,0,0,0},
  63                  {0,0,0,0},
  64                  {0,0,0,0},
  65                  {0,0,0,0}
  66                  };
  67          uint8 xdata KeySatu[4][4]={
  68                  {0xff,0xff,0xff,0xff},
  69                  {0xff,0xff,0xff,0xff},
  70                  {0xff,0xff,0xff,0xff},
  71                  {0xff,0xff,0xff,0xff}
  72                  };
  73          uint8 xdata KeySatuBackup[4][4]={
  74                  {0x01,0x01,0x01,0x01},
  75                  {0x01,0x01,0x01,0x01},
  76                  {0x01,0x01,0x01,0x01},
  77                  {0x01,0x01,0x01,0x01}
  78                  };
  79          uint8 KeyScanArray[4][4]={
  80                  {0xff,0xff,0xff,0xff},
  81                  {0xff,0xff,0xff,0xff},
  82                  {0xff,0xff,0xff,0xff},
  83                  {0xff,0xff,0xff,0xff}
  84                  };
  85          uint8 code KeyCodeMap[4][4]={ //¾ØÕó°´¼ü±àºÅµ½±ê×¼¼üÅÌ¼üÂëµÄÓ³Éä±í
  86                  { 0x31, 0x32, 0x33, 0x26 }, //Êý×Ö¼ü1¡¢Êý×Ö¼ü2¡¢Êý×Ö¼ü3¡¢ÏòÉÏ¼ü
  87              { 0x34, 0x35, 0x36, 0x25 }, //Êý×Ö¼ü4¡¢Êý×Ö¼ü5¡¢Êý×Ö¼ü6¡¢Ïò×ó¼ü
  88              { 0x37, 0x38, 0x39, 0x28 },  //Êý×Ö¼ü7¡¢Êý×Ö¼ü8¡¢Êý×Ö¼ü9¡¢ÏòÏÂ¼ü
  89              { 0x30, 0x1B, 0x0D, 0x27 } //Êý×Ö¼ü0¡¢ESC¼ü¡¢  »Ø³µ¼ü¡¢ ÏòÓÒ¼ü
  90                  };
  91          void KeyDriver()
  92          {
  93   1              uint8 i,j;
  94   1              for(i=0;i<4;i++)
  95   1                      for(j=0;j<4;j++)
  96   1                              {
  97   2                                      if(KeySatu[i][j]!=0xff)
  98   2                                              if(KeySatu[i][j]==0x00)
  99   2                                                      {
 100   3                                                              KeySatu[i][j]=0xff;
 101   3                                                              KeyAction(KeyCodeMap[i][j],0);
 102   3                                                      }
 103   2                                              else if(KeySatu[i][j]==0x01)
 104   2                                                      {
 105   3                                                              KeySatu[i][j]=0xff;
 106   3                                                              KeyAction(KeyCodeMap[i][j],1);
 107   3                                                      }
 108   2                              }
 109   1              if(KEYTIMELIMIT!=0)
 110   1                      for(i=0;i<4;i++)
 111   1                              for(j=0;j<4;j++)
 112   1                                      {
 113   2                                              if(keytime[i][j]>=KEYTIMELIMIT)
 114   2                                                      if(keytime[i][j]>=keylimit[i][j])
 115   2                                                              {
C51 COMPILER V9.02   KEY                                                                   03/28/2015 01:35:11 PAGE 3   

 116   3                                                                      keylimit[i][j]+=KEYTIMEINC;
 117   3                                                                      KeyAction(KeyCodeMap[i][j],2);
 118   3                                                              }
 119   2                                                      else ;
 120   2                                              else keylimit[i][j]=KEYTIMELIMIT;
 121   2                                      }
 122   1      }
 123          
 124          void KeyScan(uint8 ms)
 125          {
 126   1              static uint8 i=0;
 127   1              uint8 j=0;
 128   1              KeyScanArray[i][0]=(KeyScanArray[i][0]<<1)|KEYIN1;
 129   1              KeyScanArray[i][1]=(KeyScanArray[i][1]<<1)|KEYIN2;
 130   1              KeyScanArray[i][2]=(KeyScanArray[i][2]<<1)|KEYIN3;
 131   1              KeyScanArray[i][3]=(KeyScanArray[i][3]<<1)|KEYIN4;
 132   1      
 133   1              for(j=0;j<4;j++)
 134   1              {
 135   2                      if((KeyScanArray[i][j]&0x0f)==0x0f)
 136   2                              {
 137   3                                      if(KeySatuBackup[i][j]==0x00)
 138   3                                      {
 139   4                                              KeySatu[i][j]=0x01;
 140   4                                              keytime[i][j]=0;
 141   4                                      }
 142   3                                      KeySatuBackup[i][j]=0x01;
 143   3                              }
 144   2                      else if((KeyScanArray[i][j]&0x0f)==0x00)
 145   2                              {
 146   3                                      if(KeySatuBackup[i][j]==0x01)
 147   3                                      {
 148   4                                              KeySatu[i][j]=0x00;
 149   4                                              keytime[i][j]=0;
 150   4                                      }
 151   3                                      else keytime[i][j]+=4*ms;
 152   3                                      KeySatuBackup[i][j]=0x00;
 153   3                              }
 154   2              }
 155   1              i++;
 156   1              if(i>=4)i=0;
 157   1              switch(i)
 158   1              {
 159   2                      case 0:KEYOUT4=1;KEYOUT1=0;break;
 160   2                      case 1:KEYOUT1=1;KEYOUT2=0;break;
 161   2                      case 2:KEYOUT2=1;KEYOUT3=0;break;
 162   2                      case 3:KEYOUT3=1;KEYOUT4=0;break;
 163   2              }
 164   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    903    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =     96    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
